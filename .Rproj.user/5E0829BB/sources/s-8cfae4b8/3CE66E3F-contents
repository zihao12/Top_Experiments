
library(NMF)
library(maptpx)
data("esGolub")

#counts <- t(as.matrix(esGolub)) ## samples by features matrix
counts <- exprs(esGolub) ## samples by features matrix

system.time(topic_clus <- maptpx::topics(t(counts), K=2, tol = 0.1))
# system.time(topic_clus_2 <- maptpx::topics(counts, K=2, tol = 0.1))

omega1 <- topic_clus$omega
theta1 <- t(topic_clus$theta)
fitted_probs1 <- omega1%*%theta1
#loglik1 <- sum(counts*log(fitted_probs1))
loglik1 <- sum(counts*t(log(fitted_probs1)))

library(NMF)
system.time(nmf_bar <- NMF::nmf(counts, rank = 2, "brunet"))
# system.time(nmf_bar1 <- NMF::nmf(t(counts), rank = 2, "brunet"))

omega2 <- t(coef(nmf_bar))
theta2 <- t(basis(nmf_bar))
fitted_probs2 <- omega2%*%theta2

#loglik2 <- sum(counts*t(log(fitted_probs2)))

plot(omega1[,1], col= "blue", pch= 20)
points(omega2[,1], col = "red", pch = 20)

compute_multinomial_loss <- function(M.hat,M){
  n = nrow(M)
  p = ncol(M)
  ## add perturbation to M.hat
  M.hat = M.hat + matrix(runif(n*p, 0, 0.1), nrow = n, ncol = p)

  ## divide by row sums
  M.hat = M.hat/rowSums(M.hat)

  ## compute loglik
  loglik = sum(M*log(M.hat))
  return(loglik)
}


library(NNLM)
system.time(nnlm <- NNLM::nnmf(t(counts), 2, method = "scd", loss = "mse"))
fitted_probs3 <- nnlm$W %*% nnlm$H
loglik3 <- compute_multinomial_loss(fitted_probs3,M=t(counts))




